#include "clang/AST/Type.h"
#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
#include <string.h>
#include <vector>
#include<fstream>
#include "llvm/Support/Host.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/Frontend/CompilerInstance.h"
#include "clang/Basic/TargetOptions.h"
#include "clang/Basic/TargetInfo.h"
#include "clang/Basic/FileManager.h"
#include "clang/Basic/SourceManager.h"
#include "clang/Basic/SourceLocation.h"
#include "clang/Basic/Diagnostic.h"
#include "clang/Lex/Preprocessor.h"
#include "clang/Lex/Lexer.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/ASTConsumer.h"
#include "clang/Parse/ParseAST.h"
#include "clang/Rewrite/Rewriters.h"
#include "clang/Rewrite/Rewriter.h"
#include "clang/Frontend/TextDiagnosticPrinter.h"
#include "clang/AST/ParentMap.h"
#include "clang/AST/Stmt.h"
#include "clang/AST/ASTContext.h"
#include "clang/AST/Decl.h"
using namespace clang;

//行列号信息
struct Array_location_info
{
   int line;
   int column;
};

int insert_total;//实际插桩函数个数
int insert_total2;//可插桩点个数

typedef std::vector<std::pair<ValueDecl *,ValueDecl *> >Pointer_vector;

// RecursiveASTVisitor is is the big-kahuna visitor that traverses
// everything in the AST.
class MyRecursiveASTVisitor: public RecursiveASTVisitor<MyRecursiveASTVisitor>
{
public:
  bool VisitVarDecl(VarDecl *D);
  bool VisitArraySubscriptExpr(ArraySubscriptExpr *AS);
  void getlineandcolumn(SourceLocation Loc);
  std::string lookforlength(std::string ss,int len,int p11);
  bool declaresSameEntity(const ValueDecl *D1, const ValueDecl *D2);
  bool VisitCallExpr(CallExpr *CE);
  bool VisitFunctionDecl(FunctionDecl *f);
  bool VisitUnaryOperator(UnaryOperator *Uo);
  bool VisitBinaryOperator(BinaryOperator *Bo);
  ValueDecl *look_last_pointer(ValueDecl *VD);
  void insert_func(ValueDecl *VD1,ValueDecl *VD2,SourceLocation SL1,SourceLocation SL2);
  std::string look_pointer_definition_length(ValueDecl *VD);
  bool single_variable_insert(DeclRefExpr *DRE);  //处理单个变量的插桩


  Rewriter Rewrite;
  CompilerInstance *ci;
  explicit MyRecursiveASTVisitor();
private:
  Array_location_info Loc_info;
  int p1;   //得到固定数组的长度信息要用到的参数
  SourceLocation SC2;
  SourceLocation SC3;
  SourceLocation SC1;
  char fc1[256];//首先遍历得到变量的缓冲区
  char fc4[256];
  char fc2[256];
  char fcd1[256];   //插桩缓存区
  ASTContext *Context; 
  std::string issame;
  std::string fname;
  std::string definition3;   //类型字符串
  std::string definition4;   //由类型字符串得到长度信息
  bool isConstantArray;   //判断传递过去的是不是固定数组
  ValueDecl *look_pointer;
  FunctionDecl *global_FD;  //把函数声明传递过来,判断以后的插桩的是不是参数
  std::vector<std::pair<ValueDecl *,ValueDecl *> >P_vector;   //形成指针序列
};

MyRecursiveASTVisitor::MyRecursiveASTVisitor():Context(NULL){p1=0;issame="";isConstantArray=false;insert_total=0;insert_total2=0;}

bool MyRecursiveASTVisitor::declaresSameEntity(const ValueDecl *D1, const ValueDecl *D2) {
  if (!D1 || !D2)
    return false;
  
  if (D1 == D2)
    return true;
  
  return D1->getCanonicalDecl() == D2->getCanonicalDecl();
}

std::string MyRecursiveASTVisitor::lookforlength(std::string ss,int len,int p11)
{
   int p3,p4;
   if(p11==0)
      p3=len;
   else p3=p11;
   p3=ss.rfind(']',p3);
//   llvm::errs()<<p3<<"  2h\n";
   p4=ss.rfind('[',p3);
//   llvm::errs()<<p4<<"  1h\n"; 
   p1=p4;
   return ss.assign(ss,p4+1,p3-p4-1);
}

//查找要插桩的数组并插入信息
bool MyRecursiveASTVisitor::VisitArraySubscriptExpr(ArraySubscriptExpr *AS)
{
     insert_total2++;
     std::string definition;
     std::string definition1;
     Expr *Curr2=NULL;
     //返回数组中变量的位置，如a[5],返回位置在5的前面
     Expr *rhs=AS->getRHS();
     //二维数组要插入的位置
     SC2=rhs->getLocStart();
     SC1=SC2;
     //下标结束的位置
     SC3=AS->getRBracketLoc();
     //   得到行列号
     SourceLocation SC22=AS->getLocStart();
     Expr *lhs=AS->getLHS();  
     getlineandcolumn(SC2);
//     llvm::errs()<<rhs->getType().getAsString()<<"  PPPPPPPPP\n";
     //得到不同维数的数组名
     while(ImplicitCastExpr *ICE2 = dyn_cast<ImplicitCastExpr>(lhs))
     {    
        Curr2=ICE2->getSubExpr();
//     找到第一维        
       if(ArraySubscriptExpr *Decl2= dyn_cast<ArraySubscriptExpr>(Curr2))
       {    
          lhs=Decl2->getLHS();
          continue;
        }
//     如果是结构成员
       else if(MemberExpr *Decl2= dyn_cast<MemberExpr>(Curr2))
       {
           llvm::errs()<<Rewrite.ConvertToString(AS)<<"\n";
           SourceLocation ST1=Decl2->getLocStart();
           if(Decl2->getType().getTypePtr()->isConstantArrayType())
           {
                    std::string definition3=Decl2->getType().getAsString();
                    std::string definition4=lookforlength(definition3,definition3.length(),0);  
                    sprintf(fc1,"_RV_insert_check(0,%s,%d,%d,",definition4.data(),Loc_info.line,Loc_info.column);
                    sprintf(fc4,")");
                    Rewrite.InsertText(SC2,fc1,true,true);
                    Rewrite.InsertText(SC3,fc4,true,true); 
                    insert_total++;
                    llvm::errs()<<Rewrite.ConvertToString(Decl2)<<"   复杂表达式\n";
           }
           break;
       }
//     如果是单个变量
       else if(DeclRefExpr *DICE5 = dyn_cast<DeclRefExpr>(Curr2)) 
       {
               DeclContext *DCT=DICE5->getDecl()->getDeclContext();
               ASTContext &AST=DICE5->getDecl()->getASTContext();
               ValueDecl *ND=DICE5->getDecl();
//               llvm::errs()<<ND->getType().getAsString()<<"  PPPPPPPPP\n";
               for(DeclContext::decl_iterator I=DCT->decls_begin(),E=DCT->decls_end();
I!=E;I++)
               {
                    if(ValueDecl *ND2= dyn_cast<ValueDecl>(*I))
                    {
                      
                      if(declaresSameEntity(ND,ND2))
                       {
                        definition=ND2->getType().getAsString();
                        if(issame=="") issame=ND2->getNameAsString();
                        else if((issame!=ND2->getNameAsString())||(p1==definition.find('[')))
                            {    p1=0; issame=ND2->getNameAsString();}
                        
                           
                           llvm::errs()<<definition<<" "<<ND->getNameAsString()<<"\n";
                           llvm::errs()<<p1<<"  hhhhh\n";
                           
//                         ND2->getNameAsString()<<"\n";
 //                        llvm::errs()<<definition.find('[')<<"  kkkk\n";
                         
                           definition1=lookforlength(definition,definition.length(),p1);
                           llvm::errs()<<definition1<<"  OOOO\n";
//                  getlineandcolumn(SC2);
                           llvm::errs()<<"\n\n";
                       }

                    }                   
                }
               //如果找到长度
               if((definition1!="")&&(definition1.find('*')==-1))
               {
//                判断返回的长度值是不是类型值，如果是的话再判断是不是参数，如果是参数再返回类型值+size
                  if(definition1!=definition)
                  {
                     llvm::errs()<<"  AAAAAAAAAA 21 \n";
                     sprintf(fc1,"_RV_insert_check(0,%s,%d,%d,",definition1.data(),Loc_info.line,Loc_info.column);
                     sprintf(fc4,")");
                     Rewrite.InsertText(SC2,fc1,true,true);
                     Rewrite.InsertText(SC3,fc4,true,true); 
                     insert_total++;
                  }
                  else
                  {
                     for (FunctionDecl::param_iterator b = global_FD->param_begin(), e = global_FD->param_end(); b != e; ++b)
                    {
                      if(ValueDecl *Body3=dyn_cast<ValueDecl>(*b))
                      {
                        if(declaresSameEntity(ND,Body3))
                        {
                          sprintf(fc1,"_RV_insert_check(0,%s_size,%d,%d,",ND->getNameAsString().data(),Loc_info.line,Loc_info.column);
                          sprintf(fc4,")");
                          Rewrite.InsertText(SC2,fc1,true,true);
                          Rewrite.InsertText(SC3,fc4,true,true); 
                          insert_total++;
                         }
                      }
                    }
                  }
               }
               //如果没有找到长度，就要X_size代替
               if(definition1.find('*')!=-1&&isConstantArray)
               {
                  for (FunctionDecl::param_iterator b = global_FD->param_begin(), e = global_FD->param_end(); b != e; ++b)
                 {
                    if(ValueDecl *Body3=dyn_cast<ValueDecl>(*b))
                    {
                      if(declaresSameEntity(ND,Body3))
                      {
                         sprintf(fc1,"_RV_insert_check(0,%s_size,%d,%d,",ND->getNameAsString().data(),Loc_info.line,Loc_info.column);
                         sprintf(fc4,")");
                         Rewrite.InsertText(SC2,fc1,true,true);
                         Rewrite.InsertText(SC3,fc4,true,true); 
                         insert_total++;
                      }
                     }
                  }
               }
               break;
           }
          else break;
      }  
   return true;
}

//得到行列号
void MyRecursiveASTVisitor::getlineandcolumn(SourceLocation Loc)
{
    SourceLocation SpellingLoc = Context->getSourceManager().getSpellingLoc(Loc);
    PresumedLoc PLoc = Context->getSourceManager().getPresumedLoc(SpellingLoc);
    if (!PLoc.isValid())
        return ;
//    const char *Filename = PLoc.getFilename();
    Loc_info.line = PLoc.getLine();
    unsigned Line = PLoc.getLine();
    llvm::errs()<< Line << ':';
    Loc_info.column=PLoc.getColumn();
    llvm::errs()<< PLoc.getColumn()<<"   ";
}

//函数调用时改写
bool MyRecursiveASTVisitor::VisitCallExpr(CallExpr *CE)
{
    SourceLocation ST;
    llvm::errs()<<"  AAAAAAAAAA 21 \n";
    if(FunctionDecl *FD=CE->getDirectCallee())       
//      判断是不是库函数
    if((FD->getLocStart().isValid())&&!Context->getSourceManager().isInSystemHeader(FD->getLocStart()))   
    {
       getlineandcolumn(FD->getLocStart());
       llvm::errs()<<FD->getNameInfo().getAsString()<<"  函数调用名\n";
       for(CallExpr::arg_iterator I=CE->arg_begin(),E=CE->arg_end();I!=E;++I)
       {
    
           llvm::errs()<<"  AAAAAAAAAA 22 \n";
           if(ImplicitCastExpr *Body3=dyn_cast<ImplicitCastExpr>(*I))
           {
               Expr *args1=Body3->getSubExpr();  
               llvm::errs()<<"  AAAAAAAAAA 23 \n";

//             如果是单个变量
               if(DeclRefExpr *Body4=dyn_cast<DeclRefExpr>(args1))        
                   single_variable_insert(Body4);
            
//            对于结构中有数组成员的
               if(MemberExpr *Body4=dyn_cast<MemberExpr>(args1))
              {  
                  llvm::errs()<<"  AAAAAAAAAA 26 \n";
                  ST=Body4->getLocStart();
                  if(Body4->getType().getTypePtr()->isConstantArrayType())
                 {
                    definition3=Body4->getType().getAsString();
                    definition4=lookforlength(definition3,definition3.length(),0); 
                    sprintf(fcd1,"%s,",definition4.data());
                    Rewrite.InsertText(ST,fcd1,true,true);
                    llvm::errs()<<Rewrite.ConvertToString(Body4)<<"   复杂表达式\n";
                 }
                 else
                {
                    sprintf(fcd1,"sizeof(%s),",Rewrite.ConvertToString(Body4).data());
                    Rewrite.InsertText(ST,fcd1,true,true);
                }
             }
//            是字符类型
              if(StringLiteral *Body4=dyn_cast<StringLiteral>(args1))
             {
                  llvm::errs()<<"  AAAAAAAAAA 27 \n";
                  ST=Body4->getLocStart();
                  sprintf(fcd1,"%d,",Body4->getLength());
                  Rewrite.InsertText(ST,fcd1,true,true);
             }
//           两个ImplicitCastExpr类型转换
             if(ImplicitCastExpr *Body5=dyn_cast<ImplicitCastExpr>(args1))
             {
                  llvm::errs()<<"  AAAAAAAAAA 28 \n";
                  Expr *args5=Body5->getSubExpr();
                  if(StringLiteral *Body6=dyn_cast<StringLiteral>(args5))
                  {
                      ST=Body6->getLocStart();
                      sprintf(fcd1,"%d,",Body6->getLength());
                      Rewrite.InsertText(ST,fcd1,true,true);
                  }
                  if(DeclRefExpr *Body6=dyn_cast<DeclRefExpr>(args5))        
                   single_variable_insert(Body6);
             }
//          参数是数组
            if(ArraySubscriptExpr *Body5=dyn_cast<ArraySubscriptExpr>(args1))  
            {
                ST=Body5->getLocStart();
                sprintf(fcd1,"1,");
                Rewrite.InsertText(ST,fcd1,true,true);
            }           
          }
    }
  }
   return true;
} 


//    判断函数调用时参数是不是数组或指针类型，是就插入长度变量，否则不插 如果是固定数组，插入固定数组的长度
bool MyRecursiveASTVisitor::single_variable_insert(DeclRefExpr *DRE)
{
   llvm::errs()<<"  AAAAAAAAAA 24 \n";
   DeclContext *DCT=DRE->getDecl()->getDeclContext();
   SourceLocation ST=DRE->getLocStart();
                  
   ValueDecl *ND3=DRE->getDecl();                  
   llvm::errs()<<ND3->getType().getAsString()<<"  参数的类型信息\n";

   if(ND3->getType().getTypePtr()->isConstantArrayType())  
   {
         llvm::errs()<<"  AAAAAAAAAA 25 \n";
         definition3=ND3->getType().getAsString();
         definition4=lookforlength(definition3,definition3.length(),0);  
//       Body5数组名
         DeclarationNameInfo Body5=DRE->getNameInfo();                                               
         sprintf(fcd1,"%s,",definition4.data());
         Rewrite.InsertText(ST,fcd1,true,true);
   }
// 如果是指针，查找指针的长度再插入 
   if(ND3->getType().getTypePtr()->isPointerType())
   {
         look_pointer=look_last_pointer(ND3);
         if(look_pointer->getType().getTypePtr()->isConstantArrayType())
        {
               definition3=look_pointer->getType().getAsString();
               definition4=lookforlength(definition3,definition3.length(),0); 
               sprintf(fcd1,"%s,",definition4.data());
               Rewrite.InsertText(ST,fcd1,true,true);
        }
         if(look_pointer->getType().getTypePtr()->isPointerType())
        {
               std::string k=look_pointer_definition_length(look_pointer);
               llvm::errs()<<" length is :"<<k<<"\n";
               sprintf(fcd1,"%s,",k.data());
               Rewrite.InsertText(ST,fcd1,true,true);
//             llvm::errs()<<look_pointer->getNameAsString()<<"  LLLLLLLLLLL\n";
         }
   }
   return true;
}


std::string MyRecursiveASTVisitor::look_pointer_definition_length(ValueDecl *VD)
{
    if(VarDecl *ND= dyn_cast<VarDecl>(VD))
    {
//      表示只是声明，没定义
        if(ND->hasDefinition()==0)
          return "1";
//      有完整定义的
        if(ND->hasDefinition()==2)
        {
           VarDecl *ND1=ND->getDefinition();
//      以“=”初始化
           if(ND1->getInitStyle()==0)
           {
//            如果有初始化值
              if(Expr *Ex=ND1->getInit())
              {
                 llvm::errs()<<Ex->IgnoreImpCasts()->getType().getAsString()<<"   ";
                 llvm::errs()<<Rewrite.ConvertToString(ND1->getInit())<<"  SSSSS\n"; 
                 if(Ex->IgnoreImpCasts()->getType().getTypePtr()->isConstantArrayType())
                 {
                    std::string definition=Ex->IgnoreImpCasts()->getType().getAsString();
                    definition=lookforlength(definition,definition.length(),0);
                    return definition; 
                 }     
                 if(Ex->IgnoreImpCasts()->getType().getTypePtr()->isPointerType())   
                 {
//                  通过字符串匹配来找出malloc与sizeof之间的长度信息,suo fen qing k ru test9.c
                    std::string temp=Rewrite.ConvertToString(ND1->getInit()); 
                    int k1=0,k2=0,k3=0,k4=0;
                    if(temp.find("sizeof",0)==-1)
                    {
                         k1=temp.find("malloc",0);
                         k4=temp.length();
                         if(k1!=-1)
                         return temp.substr(k1+7,k4-k1-8);
                    }
                    else
                    {
                       k1=temp.find("malloc",0);
                       llvm::errs()<<k1<<"  malloc ";
                       k2=temp.find("sizeof",0);
                       llvm::errs()<<k2<<"  sizeof ";
                       k3=temp.find(')',k2);
                       llvm::errs()<<k3<<"  )1 ";
                       k4=temp.length();
                       llvm::errs()<<k4<<"  )2 \n";
                       if(k2==k1+7)
                       {
                          if(k3+2==k4)
                            return "1";
                          else
                            return temp.substr(k3+3,k4-k3-4);
                       }
                       else
                       {
                          llvm::errs()<<temp.substr(k1+7,k2-k1-10)<<"  JJJJJJJJJJJJJ\n";
                          return temp.substr(k1+7,k2-k1-10);   
                       }
                    }
//                    return "sizeof("+ND1->getNameAsString()+")";
                 }
               }
//            没有初始化值,判断一下是不是函数的参数
              else 
              {
                for (FunctionDecl::param_iterator b = global_FD->param_begin(), e = global_FD->param_end(); b != e; ++b)
                  if(ValueDecl *Body3=dyn_cast<ValueDecl>(*b))
                      if(declaresSameEntity(ND1,Body3))
                         return ND1->getNameAsString()+"_size";
                return "sizeof("+ND1->getNameAsString()+")";
              }
           }
/*
           if(ND1->getInitStyle()==1)
              llvm::errs()<<"  11111111\n";
           if(ND1->getInitStyle()==2)
               llvm::errs()<<"  2222222\n"; 
           */
         }
    }
    return "1";
}
//得到函数名及函数开始的位置
bool MyRecursiveASTVisitor::VisitFunctionDecl(FunctionDecl *f)
{
  P_vector.clear();
  int size_i=1;
  char fc5[256];
  isConstantArray=false;
  global_FD=f;
  if (f->hasBody())
  {
   // Get name of function
    DeclarationNameInfo dni = f->getNameInfo();
    DeclarationName dn = dni.getName();
    fname = dn.getAsString();
//    llvm::errs()<<fname<<"\n";    
    if(fname!="main")
    for (FunctionDecl::param_iterator b = f->param_begin(), e = f->param_end(); b != e; ++b)
    {
         if(ParmVarDecl *Body3=dyn_cast<ParmVarDecl>(*b))
          { 
              QualType var3=Body3->getOriginalType();
              const Type *typ=var3.getTypePtr(); 
              if(typ->isIncompleteArrayType()||typ->isPointerType())
               {
//                  llvm::errs()<<Body3->getNameAsString()<<"  AAAAAA\n";
                  SourceLocation begin=Body3->getLocStart();
                  sprintf(fc5,"int %s_size,",Body3->getNameAsString().data());
                  Rewrite.InsertText(begin,fc5,true,true);
                  isConstantArray=true;
                }
           }     
     }
  }
  else
  {
     for (FunctionDecl::param_iterator b = f->param_begin(), e = f->param_end(); b != e; ++b)
      if(ParmVarDecl *Body3=dyn_cast<ParmVarDecl>(*b))
       {
         
         QualType var3=Body3->getOriginalType();
         const Type *typ=var3.getTypePtr(); 
         if(typ->isIncompleteArrayType()||typ->isPointerType()) 
         {
           SourceLocation begin=Body3->getLocStart();
           if(!f->isMain())
           {
                sprintf(fc5,"int size_%d,",size_i++);
                Rewrite.InsertText(begin,fc5,true,true);
           }
         }
       }
  }
  return true; 
}


bool MyRecursiveASTVisitor::VisitVarDecl(VarDecl *D) 
{     
      Context=&(D->getASTContext());
      if(D->getTypeSourceInfo()->getType().getTypePtr()->isPointerType())
      {
//    形如int *q=buf+3等指针初始化需要考虑
      }
      DeclContext *Pointer_Decl=D->getDeclContext();
      return true;
}

//访问指针表达式
bool MyRecursiveASTVisitor::VisitUnaryOperator(UnaryOperator *Uo)
{
   
   UnaryOperator::Opcode Opc=Uo->getOpcode();
   StringRef Str=Uo->getOpcodeStr(Opc);
   SourceRange SR1=Uo->getSourceRange();
   
// 得到形如*（P+4）最后要插入括号的地方
   SourceLocation SL_end1=SR1.getEnd();

   Expr *Ex1=Uo->getSubExpr(); 
   SourceLocation SL_begin=Uo->getOperatorLoc();
   int offset1 = Lexer::MeasureTokenLength(SL_begin,
                                           ci->getSourceManager(),
                                           ci->getLangOpts());
   int offset2 = Lexer::MeasureTokenLength(SL_end1,
                                           ci->getSourceManager(),
                                           ci->getLangOpts());
   
//  得到要插入桩函数的地方
    SourceLocation SL_begin1= SL_begin.getLocWithOffset(offset1);
//  得到形如*p，*--p,*p++最后要插入括号的地方
    SourceLocation SL_end2=SL_end1.getLocWithOffset(offset2);
    getlineandcolumn(SL_begin1);
    if(Str.equals("*"))
    {
         insert_total2++;
//        处理形如：*（p+4） *(4+p)这种情况没考虑
          while(ParenExpr *DRf = dyn_cast<ParenExpr>(Ex1))
         {               
              Expr *subexpr=DRf->getSubExpr();  
//              llvm::errs()<<"  AAAAAAAAAA 1 \n";            
              if(BinaryOperator *Bop=dyn_cast<BinaryOperator>(subexpr))
              {
                   Ex1=Bop->getLHS();
                   if(ParenExpr *DRf=dyn_cast<ParenExpr>(Ex1))
                      continue;                  
                   
                   if(ImplicitCastExpr *Ime=dyn_cast<ImplicitCastExpr>(Ex1))
                   { 
                       Ex1=Ime->getSubExpr(); 
//                       llvm::errs()<<"  AAAAAAAAAA 2 \n";
                       if(DeclRefExpr *DRf1=dyn_cast<DeclRefExpr>(Ex1))
                       {
                          DeclContext *DCTe=DRf1->getDecl()->getDeclContext();
//                          llvm::errs()<<"\n\n\n一段作用域\n";
//                         DCTe->dumpDeclContext();
//                          llvm::errs()<<"一段作用域\n\n\n";
                          ValueDecl *NDe=DRf1->getDecl();
//                          llvm::errs()<<NDe->getType().getAsString()<<"  指针类型\n";
                         if(NDe->getType().getTypePtr()->isPointerType())
                         {
                              llvm::errs()<<NDe->getType().getAsString()<<"  指针类型";                                
                              look_pointer=look_last_pointer(NDe);
                              insert_func(look_pointer,NDe,SL_begin1,SL_end1);
                              break;
                         }                          
                       }
//                     指针嵌套
                       if(UnaryOperator *Bop=dyn_cast<UnaryOperator>(Ex1))
                       {
                           if(ImplicitCastExpr *Ime=dyn_cast<ImplicitCastExpr>(Bop->getSubExpr()))
                              Ex1=Ime->getSubExpr(); 
                           if(ParenExpr *DRf=dyn_cast<ParenExpr>(Ex1))
                               continue;
//                           llvm::errs()<<"  AAAAAAAAAA 2 \n";
                           if(DeclRefExpr *DRf1=dyn_cast<DeclRefExpr>(Ex1))
                           {
                             DeclContext *DCTe=DRf1->getDecl()->getDeclContext();
//                             llvm::errs()<<"\n\n\n一段作用域\n";
//                             DCTe->dumpDeclContext();
//                             llvm::errs()<<"一段作用域\n\n\n";
                             ValueDecl *NDe=DRf1->getDecl();
//                           llvm::errs()<<NDe->getType().getAsString()<<"  指针类型\n";
                             if(NDe->getType().getTypePtr()->isPointerType())
                             {
                                llvm::errs()<<NDe->getType().getAsString()<<"  指针类型";                                
                                look_pointer=look_last_pointer(NDe);
                                insert_func(look_pointer,NDe,SL_begin1,SL_end1);
                                break;
                             }                          
                           }
                       }
                   }    
              }     
             if(UnaryOperator *Bop=dyn_cast<UnaryOperator>(subexpr))    
             {
                 
                      break;
             }
/*
                   Ex1=Bop->getRHS();
                   if(DeclRefExpr *DRf1=dyn_cast<DeclRefExpr>(Ex1))
                     {
                        DeclContext *DCTe=DRf1->getDecl()->getDeclContext();
                        ValueDecl *NDe=DRf1->getDecl();
                        llvm::errs()<<NDe->getNameAsString()<<"  参数值\n";
                        break;
                      }
  */                 
               
             if(CStyleCastExpr *Bop=dyn_cast<CStyleCastExpr>(subexpr))
             {
                 break;
             }
             
        }
     

//        处理形如：*p
       if(ImplicitCastExpr *DRf = dyn_cast<ImplicitCastExpr>(Ex1))
      {  
              if(DeclRefExpr *DRf1=dyn_cast<DeclRefExpr>(DRf->getSubExpr()))
            {
              ValueDecl *NDe=DRf1->getDecl();
              look_pointer=look_last_pointer(NDe);
              if(look_pointer->getNameAsString()!="argv")
                 insert_func(look_pointer,NDe,SL_begin1,SL_end2);
              DeclContext *DCT=DRf1->getDecl()->getDeclContext();
            }
      }

//        处理一元嵌套形如：*--p,*p++
      while(UnaryOperator *Uo=dyn_cast<UnaryOperator>(Ex1))
      {
             Expr *Ex1=Uo->getSubExpr(); 
             if(Str.equals("*"))
            {
               if(DeclRefExpr *DRf = dyn_cast<DeclRefExpr>(Ex1))
               {  
                   ValueDecl *ND1=DRf->getDecl();  
                   look_pointer=look_last_pointer(ND1);
                   llvm::errs()<<"  AAAAAAAAAA 3 \n";
                   if(look_pointer->getNameAsString()!="argv")
                      insert_func(look_pointer,ND1,SL_begin1,SL_end2);
                   llvm::errs()<<ND1->getNameAsString()<<"   一元运算里最终的指针名\n"; 
                   break;
               }
            }
      } 
  }
  return true;
}

//找到指针链的末尾
ValueDecl *MyRecursiveASTVisitor::look_last_pointer(ValueDecl *VD)
{
    Pointer_vector::iterator iter;
//    llvm::errs()<<"FFFFFFFFFF  "<<P_vector.size()<<"   DDDDDSSSSSSSSSSSSSSS\n";
r1: for(iter=P_vector.end()-1;iter!=P_vector.begin()-1;iter--)
    {
      
      if(operator==(iter->first->getNameAsString(),VD->getNameAsString()))
      {  
        VD=iter->second; 
        goto r1;
      }
    } 
    return VD;
   
}

//找到定义时的大小,并插入,第一个参数表示当前指针链的末尾，第二个参数是当前要判断的指针，SL1表示插入的开头位置，SL2表示后面“))”插入的位置
void MyRecursiveASTVisitor::insert_func(ValueDecl *VD1,ValueDecl *VD2,SourceLocation SL1,SourceLocation SL2)
{
   if(VD1->getType().getTypePtr()->isPointerType())
    {
        sprintf(fc1,"(%s)(_RV_insert_pointer_check((void *)%s,(void *)(%s+%s-1),%d,%d,(void *)",VD2->getType().getAsString().data(),VD1->getNameAsString().data(),VD1->getNameAsString().data(),look_pointer_definition_length(VD1).data(),Loc_info.line,Loc_info.column);
        insert_total++;
    }
   if(VD1->getType().getTypePtr()->isConstantArrayType())
    {
       std::string definition=VD1->getType().getAsString();
       definition=lookforlength(definition,definition.length(),0);
       sprintf(fc1,"(%s)(_RV_insert_pointer_check((void *)%s,(void *)(%s+%s-1),%d,%d,(void *)",VD2->getType().getAsString().data(),VD1->getNameAsString().data(),VD1->getNameAsString().data(),definition.data(),Loc_info.line,Loc_info.column);
       insert_total++;
    }
   Rewrite.InsertText(SL1,fc1,true,true);
   sprintf(fc4,"))");
   Rewrite.InsertText(SL2,fc4,true,true);
}

//遍历赋值表达式，找出指针的赋值作成指针序列
bool MyRecursiveASTVisitor::VisitBinaryOperator(BinaryOperator *Bo)
{
   bool t1=false;
   bool t2=false;
   ValueDecl *lNDe;
   ValueDecl *rNDe;

   StringRef Str=Bo->getOpcodeStr();
   SourceRange SR1=Bo->getSourceRange();
   if(Str.equals("="))
   {
     Expr *elhs=Bo->getLHS();
     Expr *erhs=Bo->getRHS();
     llvm::errs()<<Rewrite.ConvertToString(erhs)<<"  LLLLLLLLLLLLLLL\n";
     if(DeclRefExpr *lDRF=dyn_cast<DeclRefExpr>(elhs))
     {
         DeclContext *DCTe=lDRF->getDecl()->getDeclContext();
         lNDe=lDRF->getDecl();
         if(lNDe->getType().getTypePtr()->isPointerType())
         {
           llvm::errs()<<lNDe->getNameAsString()<<"  参数值1 ";
           t1=true;
         } 
//       处理形如q=buf+3这种情况
         if(BinaryOperator *Bop=dyn_cast<BinaryOperator>(erhs))
          {
               Expr *Ex=Bop->getLHS();                 
               if(ImplicitCastExpr *Ime=dyn_cast<ImplicitCastExpr>(Ex))
               { 
                   Ex=Ime->getSubExpr(); 
                   if(DeclRefExpr *DRf1=dyn_cast<DeclRefExpr>(Ex))
                   {
                      DeclContext *DCTe=DRf1->getDecl()->getDeclContext();
                      rNDe=DRf1->getDecl();
                      if(rNDe->getType().getTypePtr()->isPointerType()||rNDe->getType().getTypePtr()->isConstantArrayType())
                      {
                         llvm::errs()<<rNDe->getNameAsString()<<"  参数值2\n";
                         t2=true;
                      } 
                   }
               }
          }
//       处理形如q=p这种情况
         if(ImplicitCastExpr *Imp=dyn_cast<ImplicitCastExpr>(erhs))
         { 
             Expr *eerhs=Imp->getSubExpr();
             if(DeclRefExpr *rDRF=dyn_cast<DeclRefExpr>(eerhs))
             {
                 DeclContext *DCTe=rDRF->getDecl()->getDeclContext();
                 rNDe=rDRF->getDecl();
                 if(rNDe->getType().getTypePtr()->isPointerType()||rNDe->getType().getTypePtr()->isConstantArrayType())
                 {
                   llvm::errs()<<rNDe->getNameAsString()<<"  参数值2\n";
                   t2=true;
                 } 
              }
             
         }
        if(t1&&t2)
           P_vector.push_back(std::make_pair(lNDe,rNDe));
      }     
   }
   if(Str.equals("+="))
   {
    llvm::errs()<<"  KKKKKKKKKK\n";
   }
   return true;
}


class MyASTConsumer : public ASTConsumer
{
 public:
    MyASTConsumer(const char *f);
    virtual bool HandleTopLevelDecl(DeclGroupRef d);

    MyRecursiveASTVisitor rv;
};


MyASTConsumer::MyASTConsumer(const char *f)
{
  rv.ci = new CompilerInstance();
  rv.ci->createDiagnostics(0,NULL);

  TargetOptions to;
  to.Triple = llvm::sys::getDefaultTargetTriple();
  TargetInfo *pti = TargetInfo::CreateTargetInfo(rv.ci->getDiagnostics(), to);
  rv.ci->setTarget(pti);

  rv.ci->createFileManager();
  rv.ci->createSourceManager(rv.ci->getFileManager());


  HeaderSearchOptions &headerSearchOptions = rv.ci->getHeaderSearchOpts();
  
  headerSearchOptions.AddPath("/usr/include",
          clang::frontend::System,
          false,
          false,
          false);
  headerSearchOptions.AddPath("/usr/include/i386-linux-gnu/",
          clang::frontend::System,
          false,
          false,
          false);
  headerSearchOptions.AddPath("/usr/lib/gcc/i686-linux-gnu/4.6/include",
          clang::frontend::System,
          false,
          false,
          false);
  
  headerSearchOptions.AddPath("/home/nanfeng/开源软件/optipng-0.6",
          clang::frontend::System,
          false,
          false,
          false);
  headerSearchOptions.AddPath("/home/nanfeng/开源软件/optipng-0.6/man",
          clang::frontend::System,
          false,
          false,
          false);
  headerSearchOptions.AddPath("/home/nanfeng/开源软件/optipng-0.6/lib/libpng",
          clang::frontend::System,
          false,
          false,
          false);
  headerSearchOptions.AddPath("/home/nanfeng/开源软件/optipng-0.6/src",
          clang::frontend::System,
          false,
          false,
          false);
   headerSearchOptions.AddPath("/home/nanfeng/开源软件/stringsearch/",
          clang::frontend::System,
          false,
          false,
          false);

  rv.ci->createPreprocessor();
  rv.ci->getPreprocessorOpts().UsePredefines = false;

  rv.ci->setASTConsumer(this);

  rv.ci->createASTContext();

  // Initialize rewriter
  rv.Rewrite.setSourceMgr(rv.ci->getSourceManager(), rv.ci->getLangOpts());

  std::string outName (f);
  
  const FileEntry *pFile = rv.ci->getFileManager().getFile(f);
  rv.ci->getSourceManager().createMainFileID(pFile);
//  FileID FD=rv.ci->getSourceManager().createMainFileID(pFile);
  rv.ci->getDiagnosticClient().BeginSourceFile(rv.ci->getLangOpts(),
                                           &rv.ci->getPreprocessor());

  

  // Convert <xxx/file>.c to <xxx_out/file_out>.c
  
  size_t ext = outName.rfind(".");
  if (ext == std::string::npos)
     ext = outName.length();
  outName.insert(ext, "_out");
  

  llvm::errs() << "Output to: " << outName << "\n";
  std::string OutErrorInfo;
  llvm::raw_fd_ostream outFile(outName.c_str(), OutErrorInfo, 0);

  if (OutErrorInfo.empty())
  {
    // Parse the AST
    ParseAST(rv.ci->getPreprocessor(), this, rv.ci->getASTContext());
    rv.ci->getDiagnosticClient().EndSourceFile();
    
    // Now output rewritten source code
    const RewriteBuffer *RewriteBuf =
      rv.Rewrite.getRewriteBufferFor(rv.ci->getSourceManager().getMainFileID());
    if(RewriteBuf)
     {
         
         outFile<<"#include\"self.h\"\n";
         outFile<<"#include<string.h>\n";
         outFile << std::string(RewriteBuf->begin(), RewriteBuf->end());
      }

    else
     {
        const llvm::MemoryBuffer *MB=rv.ci->getSourceManager().getBuffer(rv.ci->getSourceManager().getMainFileID());
        StringRef SR=MB->getBuffer();
        outFile<<std::string(SR.begin(), SR.end());


      }

  }
  else
  {
    llvm::errs() << "Cannot open " << outName << " for writing\n";
  }

  outFile.close();
  
//  FILE *stream=freopen("1.txt","w",llvm::errs());
  delete rv.ci;
}

bool MyASTConsumer::HandleTopLevelDecl(DeclGroupRef d)
{
  typedef DeclGroupRef::iterator iter;

  for (iter b = d.begin(), e = d.end(); b != e; ++b)
  {
    rv.TraverseDecl(*b);
  }

  return true; // keep going
}



int main(int argc, char *argv[])
{
  struct stat sb;
  if (argc != 2)
  {
     llvm::errs() << "Usage: CIrewriter <filename>\n";
     return 1;
  }

  if (stat(argv[1], &sb) == -1)
  {
    perror(argv[1]);
    exit(EXIT_FAILURE);
  } 
  MyASTConsumer *astConsumer = new MyASTConsumer(argv[1]);
  printf("\n\nthe org number is %d,the insert total is %d\n",insert_total2,insert_total);
  return 0;
}
