#include "clang/AST/Type.h"
#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
#include <string.h>
#include <vector>
#include<fstream>
#include "llvm/Support/Host.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/Frontend/CompilerInstance.h"
#include "clang/Basic/TargetOptions.h"
#include "clang/Basic/TargetInfo.h"
#include "clang/Basic/FileManager.h"
#include "clang/Basic/SourceManager.h"
#include "clang/Basic/SourceLocation.h"
#include "clang/Basic/Diagnostic.h"
#include "clang/Lex/Preprocessor.h"
#include "clang/Lex/Lexer.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/ASTConsumer.h"
#include "clang/Parse/ParseAST.h"
#include "clang/Rewrite/Rewriters.h"
#include "clang/Rewrite/Rewriter.h"
#include "clang/Frontend/TextDiagnosticPrinter.h"
#include "clang/AST/ParentMap.h"
#include "clang/AST/Stmt.h"
#include "clang/AST/ASTContext.h"
using namespace clang;

//行列号信息
struct Array_location_info
{
   int line;
   int column;
};

// RecursiveASTVisitor is is the big-kahuna visitor that traverses
// everything in the AST.
class MyRecursiveASTVisitor: public RecursiveASTVisitor<MyRecursiveASTVisitor>
{
public:
  bool VisitVarDecl(VarDecl *D);
  bool VisitArraySubscriptExpr(ArraySubscriptExpr *AS);
  void getlineandcolumn(SourceLocation Loc);
  std::string lookforlength(std::string ss,int len,int p11);
  bool declaresSameEntity(const ValueDecl *D1, const ValueDecl *D2);
  bool VisitCallExpr(CallExpr *CE);
  bool VisitFunctionDecl(FunctionDecl *f);
  bool VisitUnaryOperator(UnaryOperator *Uo);
  bool VisitBinaryOperator(BinaryOperator *Bo);

  Rewriter Rewrite;
  CompilerInstance *ci;
  explicit MyRecursiveASTVisitor();
private:
  Array_location_info Loc_info;
  int p1;
  int i;   //表示指针链接
  SourceLocation SC2;
  SourceLocation SC3;
  SourceLocation SC1;
  char fc1[256];//首先遍历得到变量的缓冲区
  char fc4[256];
  char fc2[256];
  ASTContext *Context; 
  std::string issame;
  std::string fname;
  std::string pointer[100];
  int kkk;
  
};

MyRecursiveASTVisitor::MyRecursiveASTVisitor():Context(NULL){p1=0;issame="";kkk=1;i=99;}

bool MyRecursiveASTVisitor::declaresSameEntity(const ValueDecl *D1, const ValueDecl *D2) {
  if (!D1 || !D2)
    return false;
  
  if (D1 == D2)
    return true;
  
  return D1->getCanonicalDecl() == D2->getCanonicalDecl();
}

std::string MyRecursiveASTVisitor::lookforlength(std::string ss,int len,int p11)
{
   int p3,p4;
   if(p11==0)
      p3=len;
   else p3=p11;
   p3=ss.rfind(']',p3);
//   llvm::errs()<<p3<<"  2h\n";
   p4=ss.rfind('[',p3);
//   llvm::errs()<<p4<<"  1h\n"; 
   p1=p4;
   return ss.assign(ss,p4+1,p3-p4-1);
}

//查找要插桩的数组并插入信息
bool MyRecursiveASTVisitor::VisitArraySubscriptExpr(ArraySubscriptExpr *AS)
{
//     llvm::errs()<<Rewrite.ConvertToString(AS)<<"\n";
     std::string definition;
     std::string definition1;
     Expr *Curr2=NULL;
     //返回数组中变量的位置，如a[5],返回位置在5的前面
     Expr *rhs=AS->getRHS();
     //二维数组要插入的位置
     SC2=rhs->getLocStart();
     SC1=SC2;
     //下标结束的位置
     SC3=AS->getRBracketLoc();
     //   得到行列号
     SourceLocation SC22=AS->getLocStart();
     Expr *lhs=AS->getLHS();  
     //得到不同维数的数组名
     while(ImplicitCastExpr *ICE2 = dyn_cast<ImplicitCastExpr>(lhs))
     {    
        Curr2=ICE2->getSubExpr();
        
       if(ArraySubscriptExpr *Decl2= dyn_cast<ArraySubscriptExpr>(Curr2))
       {    
          lhs=Decl2->getLHS();
          continue;
        }
       else if(DeclRefExpr *DICE5 = dyn_cast<DeclRefExpr>(Curr2)) 
       {
               DeclContext *DCT=DICE5->getDecl()->getDeclContext();
               ASTContext &AST=DICE5->getDecl()->getASTContext();
               ValueDecl *ND=DICE5->getDecl();
               for(DeclContext::decl_iterator I=DCT->decls_begin(),E=DCT->decls_end();
I!=E;I++)
               {
                    if(ValueDecl *ND2= dyn_cast<ValueDecl>(*I))
                    {
                      
                      if(declaresSameEntity(ND,ND2))
                       {
                        definition=ND2->getType().getAsString();
                        if(issame=="") issame=ND2->getNameAsString();
                        else if((issame!=ND2->getNameAsString())||(p1==definition.find('[')))
                            {    p1=0; issame=ND2->getNameAsString();}
                        
                           getlineandcolumn(SC2);
                           llvm::errs()<<definition<<" "<<ND->getNameAsString()<<"\n";
                           llvm::errs()<<p1<<"  hhhhh\n";
                           
//                         ND2->getNameAsString()<<"\n";
 //                        llvm::errs()<<definition.find('[')<<"  kkkk\n";
                         
                           definition1=lookforlength(definition,definition.length(),p1);
                           llvm::errs()<<definition1<<"  OOOO\n";
//                  getlineandcolumn(SC2);
                           llvm::errs()<<"\n\n";
                       }

                    }                   
                }
               //如果找到长度
               if((definition1!="")&&(definition1.find('*')==-1))
               {
                  
                  sprintf(fc1,"_RV_insert_check(%s,%d,%d,",definition1.data(),Loc_info.line,Loc_info.column);
                  sprintf(fc4,")");
                  Rewrite.InsertText(SC2,fc1,true,true);
                  Rewrite.InsertText(SC3,fc4,true,true); 
               }
               //如果没有找到长度，就要X_size代替
               if(definition1.find('*')!=-1)
               {
                  sprintf(fc1,"_RV_insert_check(%s_size,%d,%d,",ND->getNameAsString().data(),Loc_info.line,Loc_info.column);
                  sprintf(fc4,")");
                  Rewrite.InsertText(SC2,fc1,true,true);
                  Rewrite.InsertText(SC3,fc4,true,true); 
               }
               break;
           }
          else break;
      }  
   return true;
}

//得到行列号
void MyRecursiveASTVisitor::getlineandcolumn(SourceLocation Loc)
{
    SourceLocation SpellingLoc = Context->getSourceManager().getSpellingLoc(Loc);
    PresumedLoc PLoc = Context->getSourceManager().getPresumedLoc(SpellingLoc);
    if (!PLoc.isValid())
        return ;
//    const char *Filename = PLoc.getFilename();
    Loc_info.line = PLoc.getLine();
    unsigned Line = PLoc.getLine();
    llvm::errs()<< Line << ':';
    Loc_info.column=PLoc.getColumn();
    llvm::errs()<< PLoc.getColumn()<<"  \n";
}

//函数调用时改写
bool MyRecursiveASTVisitor::VisitCallExpr(CallExpr *CE)
{
    std::string definition3;
    std::string definition4;
    char fcd1[256];
    
    if(FunctionDecl *FD=CE->getDirectCallee())
//      判断是不是库函数，有可能错了
        if(FD->getStorageClass()!=SC_Extern)
         for(CallExpr::arg_iterator I=CE->arg_begin(),E=CE->arg_end();I!=E;++I)
        {
           if(ImplicitCastExpr *Body3=dyn_cast<ImplicitCastExpr>(*I))
           {
               Expr *args1=Body3->getSubExpr();              
               if(DeclRefExpr *Body4=dyn_cast<DeclRefExpr>(args1))
               {
                   DeclContext *DCT=Body4->getDecl()->getDeclContext();
                   SourceLocation ST=Body4->getLocStart();
                   ValueDecl *ND3=Body4->getDecl();
                  llvm::errs()<<FD->getNameInfo().getAsString()<<"  函数调用名\n";
                  llvm::errs()<<ND3->getType().getAsString()<<"  参数的类型信息\n";
//                判断函数调用时参数是不是数组或指针类型，是就插入长度变量，否则不插
                 if(ND3->getType().getTypePtr()->isConstantArrayType()||ND3->getType().getTypePtr()->isPointerType())  
                   for(DeclContext::decl_iterator I=DCT->decls_begin(),E=DCT->decls_end();
I!=E;I++)
                  {
                     
                    if(ValueDecl *ND4= dyn_cast<ValueDecl>(*I))
                    {
                      
                      if(declaresSameEntity(ND3,ND4))
                       {
                         
//                         llvm::errs()<<ND3->getNameAsString()<<"  参数值\n";
                         definition3=ND3->getType().getAsString();
                         definition4=lookforlength(definition3,definition3.length(),0);  
//                       Body5数组名
                         DeclarationNameInfo Body5=Body4->getNameInfo();
                                                 
//                       如果是固定数组，插入固定数组的长度
                         if(ND3->getType().getTypePtr()->isConstantArrayType())  
                         {
                             sprintf(fcd1,"%s,",definition4.data());
                             Rewrite.InsertText(ST,fcd1,true,true);
                         }
//                       如果是指针，查找指针的长度再插入 
                         if(ND3->getType().getTypePtr()->isPointerType())
                         {
                             printf("AAAA %d\n",ND3->getType().getAsString().find("char"));
                             if(ND3->getType().getAsString().find("char")==0)
                               {
                                 //对于字符指针
                                 sprintf(fcd1,"strlen(%s),",ND3->getNameAsString().data());
                                 Rewrite.InsertText(ST,fcd1,true,true);
                               }
                             else
                               {
                                 //对于其他分配的指针
                                 sprintf(fcd1,"sizeof(%s),",ND3->getNameAsString().data());
                                 Rewrite.InsertText(ST,fcd1,true,true);
                               }
                         }
                       }
                     }
                  }
                }
//           对于结构中有数组成员的
             if(MemberExpr *Body4=dyn_cast<MemberExpr>(args1))
             {
                SourceLocation ST=Body4->getLocStart();
                sprintf(fcd1,"strlen(%s),",Rewrite.ConvertToString(Body4).data());
                Rewrite.InsertText(ST,fcd1,true,true);
                llvm::errs()<<Rewrite.ConvertToString(Body4)<<"   复杂表达式\n";
             }
             
          }
    }
   return true;
} 

//得到函数名及函数开始的位置
bool MyRecursiveASTVisitor::VisitFunctionDecl(FunctionDecl *f)
{
  int size_i=1;
  char fc5[256];
  if (f->hasBody())
  {
   // Get name of function
    DeclarationNameInfo dni = f->getNameInfo();
    DeclarationName dn = dni.getName();
    fname = dn.getAsString();
//    llvm::errs()<<fname<<"\n";    
    for (FunctionDecl::param_iterator b = f->param_begin(), e = f->param_end(); b != e; ++b)
    {
         if(ParmVarDecl *Body3=dyn_cast<ParmVarDecl>(*b))
          { 
              QualType var3=Body3->getOriginalType();
              const Type *typ=var3.getTypePtr(); 
              if(typ->isIncompleteArrayType()||typ->isPointerType())
               {
//                  llvm::errs()<<Body3->getNameAsString()<<"  AAAAAA\n";
                  SourceLocation begin=Body3->getLocStart();
                  if(fname!="main")
                  {
                    sprintf(fc5,"int %s_size,",Body3->getNameAsString().data());
                    Rewrite.InsertText(begin,fc5,true,true);
                  }
                }
           }     
     }
  }
  else
  {
     for (FunctionDecl::param_iterator b = f->param_begin(), e = f->param_end(); b != e; ++b)
      if(ParmVarDecl *Body3=dyn_cast<ParmVarDecl>(*b))
       {
         
         QualType var3=Body3->getOriginalType();
         const Type *typ=var3.getTypePtr(); 
         if(typ->isIncompleteArrayType()||typ->isPointerType()) 
         {
           SourceLocation begin=Body3->getLocStart();
           if(!f->isMain())
           {
                sprintf(fc5,"int size_%d,",size_i++);
                Rewrite.InsertText(begin,fc5,true,true);
           }
         }
       }
  }
  return true; 
}


bool MyRecursiveASTVisitor::VisitVarDecl(VarDecl *D) 
{     
      Context=&(D->getASTContext());
      if(D->getTypeSourceInfo()->getType().getTypePtr()->isPointerType())
      DeclContext *Pointer_Decl=D->getDeclContext();
      return true;
}

//访问指针表达式
bool MyRecursiveASTVisitor::VisitUnaryOperator(UnaryOperator *Uo)
{
   
   UnaryOperator::Opcode Opc=Uo->getOpcode();
   StringRef Str=Uo->getOpcodeStr(Opc);
   SourceRange SR1=Uo->getSourceRange();

// 得到形如*（P+4）最后要插入括号的地方
   SourceLocation SL_end1=SR1.getEnd();

   Expr *Ex1=Uo->getSubExpr(); 
   SourceLocation SL_begin=Uo->getOperatorLoc();
   int offset1 = Lexer::MeasureTokenLength(SL_begin,
                                           ci->getSourceManager(),
                                           ci->getLangOpts());
   int offset2 = Lexer::MeasureTokenLength(SL_end1,
                                           ci->getSourceManager(),
                                           ci->getLangOpts());
   
//  得到要插入桩函数的地方
    SourceLocation SL_begin1= SL_begin.getLocWithOffset(offset1);
//  得到形如*p，*--p,*p++最后要插入括号的地方
    SourceLocation SL_end2=SL_end1.getLocWithOffset(offset2);
    getlineandcolumn(SL_begin1);
    if(Str.equals("*"))
    {
//        处理形如：*（p+4） *(4+p)这种情况没考虑
          while(ParenExpr *DRf = dyn_cast<ParenExpr>(Ex1))
         { 
              
              Expr *subexpr=DRf->getSubExpr();
              
              if(BinaryOperator *Bop=dyn_cast<BinaryOperator>(subexpr))
               {
                   Ex1=Bop->getLHS();
                   if(ParenExpr *DRf=dyn_cast<ParenExpr>(Ex1))
                      continue;                  
                   
                   if(ImplicitCastExpr *Ime=dyn_cast<ImplicitCastExpr>(Ex1))
                   { 
                       Ex1=Ime->getSubExpr(); 
                      if(DeclRefExpr *DRf1=dyn_cast<DeclRefExpr>(Ex1))
                       {
                          DeclContext *DCTe=DRf1->getDecl()->getDeclContext();
                          llvm::errs()<<"\n\n\n一段作用域\n";
                          DCTe->dumpDeclContext();
                          llvm::errs()<<"一段作用域\n\n\n";
                          ValueDecl *NDe=DRf1->getDecl();
//                          llvm::errs()<<NDe->getType().getAsString()<<"  指针类型\n";
                         if(NDe->getType().getTypePtr()->isPointerType())
                         {
                              if(pointer[98]!="")
                             {
                                 llvm::errs()<<NDe->getType().getAsString()<<"  指针类型";
                                 llvm::errs()<<pointer[98]<<"  要插入的参数值\n";
                                 if(NDe->getType().getAsString().find("char")==0)
                                  sprintf(fc1,"(_RV_insert_char_pointer_check(%s+%s_size-1,%d,%d,",NDe->getNameAsString().data(),pointer[98].data(),Loc_info.line,Loc_info.column);
                                  if(NDe->getType().getAsString().find("int")==0)
                                  sprintf(fc1,"(_RV_insert_int_pointer_check(%s+%s_size-1,%d,%d,",NDe->getNameAsString().data(),pointer[98].data(),Loc_info.line,Loc_info.column);
                                  sprintf(fc4,"))");
                                  Rewrite.InsertText(SL_begin1,fc1,true,true);
                                  Rewrite.InsertText(SL_end1,fc4,true,true); 
                                  i=99;
                                  for(int k=0;k<=i;k++)
                                    pointer[k]="";
                                 break;
                             }else
                             {
                                  llvm::errs()<<pointer[98]<<"  要插入的参数值\n";
                                  if(NDe->getType().getAsString().find("char")==0)
                                  sprintf(fc1,"(_RV_insert_char_pointer_check(%s+%s_size-1,%d,%d,",NDe->getNameAsString().data(),NDe->getNameAsString().data(),Loc_info.line,Loc_info.column);
                                  if(NDe->getType().getAsString().find("int")==0)
                                  sprintf(fc1,"(_RV_insert_int_pointer_check(%s+%s_size-1,%d,%d,",NDe->getNameAsString().data(),NDe->getNameAsString().data(),Loc_info.line,Loc_info.column);
                                  sprintf(fc4,"))");
                                  Rewrite.InsertText(SL_begin1,fc1,true,true);
                                  Rewrite.InsertText(SL_end1,fc4,true,true); 
                             }
                         } 
                         
                       }
                   }           
/*
                   Ex1=Bop->getRHS();
                   if(DeclRefExpr *DRf1=dyn_cast<DeclRefExpr>(Ex1))
                     {
                        DeclContext *DCTe=DRf1->getDecl()->getDeclContext();
                        ValueDecl *NDe=DRf1->getDecl();
                        llvm::errs()<<NDe->getNameAsString()<<"  参数值\n";
                        break;
                      }
  */                 
               }
             
           }
     

//   处理形如：*p
    if(ImplicitCastExpr *DRf = dyn_cast<ImplicitCastExpr>(Ex1))
    {  
         if(DeclRefExpr *DRf1=dyn_cast<DeclRefExpr>(DRf->getSubExpr()))
         {
              ValueDecl *NDe=DRf1->getDecl();
              DeclContext *DCT=DRf1->getDecl()->getDeclContext();
              if(NDe->getType().getAsString().find("char")==0)
              sprintf(fc1,"(_RV_insert_char_pointer_check(%s+%s_size-1,%d,%d,",DRf1->getDecl()->getNameAsString().data(),DRf1->getDecl()->getNameAsString().data(),Loc_info.line,Loc_info.column);
              sprintf(fc4,"))");
              if(NDe->getType().getAsString().find("int")==0)
              sprintf(fc1,"(_RV_insert_int_pointer_check(%s+%s_size-1,%d,%d,",DRf1->getDecl()->getNameAsString().data(),DRf1->getDecl()->getNameAsString().data(),Loc_info.line,Loc_info.column);
              sprintf(fc4,"))");
              Rewrite.InsertText(SL_begin1,fc1,true,true);
              Rewrite.InsertText(SL_end2,fc4,true,true); 
         }
    }

//    处理一元嵌套形如：*--p,*p++
   while(UnaryOperator *Uo=dyn_cast<UnaryOperator>(Ex1))
   {
         Expr *Ex1=Uo->getSubExpr(); 
         if(Str.equals("*"))
         {
             if(DeclRefExpr *DRf = dyn_cast<DeclRefExpr>(Ex1))
             {  
                   ValueDecl *ND1=DRf->getDecl();  
                   llvm::errs()<<ND1->getNameAsString()<<"   一元运算里最终的指针名\n"; 
//                 llvm::errs()<<Str<<"  AAAALLLLL\n";
                   if(ND1->getType().getAsString().find("char")==0)
                   sprintf(fc1,"(_RV_insert_char_pointer_check(%s+%s_size-1,%d,%d,",ND1->getNameAsString().data(),ND1->getNameAsString().data(),Loc_info.line,Loc_info.column);
                   if(ND1->getType().getAsString().find("int")==0)
                   sprintf(fc1,"(_RV_insert_int_pointer_check(%s+%s_size-1,%d,%d,",ND1->getNameAsString().data(),ND1->getNameAsString().data(),Loc_info.line,Loc_info.column);
                   sprintf(fc4,"))");
                   Rewrite.InsertText(SL_begin1,fc1,true,true);
                   Rewrite.InsertText(SL_end2,fc4,true,true); 
                   break;
             }
          }
   } 
  }
  return true;
}

bool MyRecursiveASTVisitor::VisitBinaryOperator(BinaryOperator *Bo)
{
   
   StringRef Str=Bo->getOpcodeStr();
   SourceRange SR1=Bo->getSourceRange();
   if(Str.equals("="))
   {
     Expr *elhs=Bo->getLHS();
     Expr *erhs=Bo->getRHS();
     if(DeclRefExpr *lDRF=dyn_cast<DeclRefExpr>(elhs))
     {
         DeclContext *DCTe=lDRF->getDecl()->getDeclContext();
         ValueDecl *lNDe=lDRF->getDecl();
         if(lNDe->getType().getTypePtr()->isPointerType())
         {
           llvm::errs()<<lNDe->getNameAsString()<<"  参数值1 ";
           pointer[i--]=lNDe->getNameAsString();
         } 

         if(ImplicitCastExpr *Imp=dyn_cast<ImplicitCastExpr>(erhs))
         { 
             Expr *eerhs=Imp->getSubExpr();
          
             if(DeclRefExpr *rDRF=dyn_cast<DeclRefExpr>(eerhs))
             {
                 DeclContext *DCTe=rDRF->getDecl()->getDeclContext();
                 ValueDecl *rNDe=rDRF->getDecl();
                 if(rNDe->getType().getTypePtr()->isPointerType()||rNDe->getType().getTypePtr()->isConstantArrayType())
                 {
                   llvm::errs()<<rNDe->getNameAsString()<<"  参数值2\n";
                   pointer[i--]=rNDe->getNameAsString();
                 } 
              }
         }
      }
     
   }
   return true;
}

class MyASTConsumer : public ASTConsumer
{
 public:
    MyASTConsumer(const char *f);
    virtual bool HandleTopLevelDecl(DeclGroupRef d);

    MyRecursiveASTVisitor rv;
};


MyASTConsumer::MyASTConsumer(const char *f)
{
  rv.ci = new CompilerInstance();
  rv.ci->createDiagnostics(0,NULL);

  TargetOptions to;
  to.Triple = llvm::sys::getDefaultTargetTriple();
  TargetInfo *pti = TargetInfo::CreateTargetInfo(rv.ci->getDiagnostics(), to);
  rv.ci->setTarget(pti);

  rv.ci->createFileManager();
  rv.ci->createSourceManager(rv.ci->getFileManager());


  HeaderSearchOptions &headerSearchOptions = rv.ci->getHeaderSearchOpts();
  
  headerSearchOptions.AddPath("/usr/include",
          clang::frontend::System,
          false,
          false,
          false);
  headerSearchOptions.AddPath("/usr/include/i386-linux-gnu/",
          clang::frontend::System,
          false,
          false,
          false);
  headerSearchOptions.AddPath("/usr/lib/gcc/i686-linux-gnu/4.6/include",
          clang::frontend::System,
          false,
          false,
          false);
  
  headerSearchOptions.AddPath("/home/administrator/下载/Spin/Src6.2.4",
          clang::frontend::System,
          false,
          false,
          false);

  rv.ci->createPreprocessor();
  rv.ci->getPreprocessorOpts().UsePredefines = false;

  rv.ci->setASTConsumer(this);

  rv.ci->createASTContext();

  // Initialize rewriter
  rv.Rewrite.setSourceMgr(rv.ci->getSourceManager(), rv.ci->getLangOpts());

  std::string outName (f);
  
  const FileEntry *pFile = rv.ci->getFileManager().getFile(f);
  rv.ci->getSourceManager().createMainFileID(pFile);
//  FileID FD=rv.ci->getSourceManager().createMainFileID(pFile);
  rv.ci->getDiagnosticClient().BeginSourceFile(rv.ci->getLangOpts(),
                                           &rv.ci->getPreprocessor());

  

  // Convert <xxx/file>.c to <xxx_out/file_out>.c
  
  size_t ext = outName.rfind(".");
  if (ext == std::string::npos)
     ext = outName.length();
  outName.insert(ext, "_out");
  

  llvm::errs() << "Output to: " << outName << "\n";
  std::string OutErrorInfo;
  llvm::raw_fd_ostream outFile(outName.c_str(), OutErrorInfo, 0);

  if (OutErrorInfo.empty())
  {
    // Parse the AST
    ParseAST(rv.ci->getPreprocessor(), this, rv.ci->getASTContext());
    rv.ci->getDiagnosticClient().EndSourceFile();
    
    // Now output rewritten source code
    const RewriteBuffer *RewriteBuf =
      rv.Rewrite.getRewriteBufferFor(rv.ci->getSourceManager().getMainFileID());
    if(RewriteBuf)
     {
         
         outFile<<"#include\"self.h\"\n";
         outFile<<"#include<string.h>\n";
         outFile << std::string(RewriteBuf->begin(), RewriteBuf->end());
      }

    else
     {
        const llvm::MemoryBuffer *MB=rv.ci->getSourceManager().getBuffer(rv.ci->getSourceManager().getMainFileID());
        StringRef SR=MB->getBuffer();
        outFile<<std::string(SR.begin(), SR.end());


      }

  }
  else
  {
    llvm::errs() << "Cannot open " << outName << " for writing\n";
  }

  outFile.close();
  
//  FILE *stream=freopen("1.txt","w",llvm::errs());
  delete rv.ci;
}

bool MyASTConsumer::HandleTopLevelDecl(DeclGroupRef d)
{
  typedef DeclGroupRef::iterator iter;

  for (iter b = d.begin(), e = d.end(); b != e; ++b)
  {
    rv.TraverseDecl(*b);
  }

  return true; // keep going
}



int main(int argc, char *argv[])
{
  struct stat sb;
  if (argc != 2)
  {
     llvm::errs() << "Usage: CIrewriter <filename>\n";
     return 1;
  }

  if (stat(argv[1], &sb) == -1)
  {
    perror(argv[1]);
    exit(EXIT_FAILURE);
  } 
  MyASTConsumer *astConsumer = new MyASTConsumer(argv[1]);
  return 0;
}
